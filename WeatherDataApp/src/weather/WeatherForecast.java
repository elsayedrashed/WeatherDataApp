// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package weather;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/** 
 * Job: WeatherForecast Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.0.20160510_1709
 * @status 
 */
public class WeatherForecast implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (dataloc != null) {

				this.setProperty("dataloc", dataloc.toString());

			}

			if (samplesize != null) {

				this.setProperty("samplesize", samplesize.toString());

			}

		}

		public String dataloc;

		public String getDataloc() {
			return this.dataloc;
		}

		public Integer samplesize;

		public Integer getSamplesize() {
			return this.samplesize;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "WeatherForecast";
	private final String projectName = "WEATHER";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					WeatherForecast.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(WeatherForecast.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRowGenerator_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_Station_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class ForecastOutStruct implements
			routines.system.IPersistableRow<ForecastOutStruct> {
		final static byte[] commonByteArrayLock_WEATHER_WeatherForecast = new byte[0];
		static byte[] commonByteArray_WEATHER_WeatherForecast = new byte[0];

		public String IATACode;

		public String getIATACode() {
			return this.IATACode;
		}

		public String Latitude;

		public String getLatitude() {
			return this.Latitude;
		}

		public String Longitude;

		public String getLongitude() {
			return this.Longitude;
		}

		public String Elevation;

		public String getElevation() {
			return this.Elevation;
		}

		public java.util.Date WeatherDate;

		public java.util.Date getWeatherDate() {
			return this.WeatherDate;
		}

		public String Condition;

		public String getCondition() {
			return this.Condition;
		}

		public String Temperature;

		public String getTemperature() {
			return this.Temperature;
		}

		public String Pressure;

		public String getPressure() {
			return this.Pressure;
		}

		public String Humidity;

		public String getHumidity() {
			return this.Humidity;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WEATHER_WeatherForecast.length) {
					if (length < 1024
							&& commonByteArray_WEATHER_WeatherForecast.length == 0) {
						commonByteArray_WEATHER_WeatherForecast = new byte[1024];
					} else {
						commonByteArray_WEATHER_WeatherForecast = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WEATHER_WeatherForecast, 0,
						length);
				strReturn = new String(commonByteArray_WEATHER_WeatherForecast,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WEATHER_WeatherForecast) {

				try {

					int length = 0;

					this.IATACode = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Elevation = readString(dis);

					this.WeatherDate = readDate(dis);

					this.Condition = readString(dis);

					this.Temperature = readString(dis);

					this.Pressure = readString(dis);

					this.Humidity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.IATACode, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Elevation, dos);

				// java.util.Date

				writeDate(this.WeatherDate, dos);

				// String

				writeString(this.Condition, dos);

				// String

				writeString(this.Temperature, dos);

				// String

				writeString(this.Pressure, dos);

				// String

				writeString(this.Humidity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("IATACode=" + IATACode);
			sb.append(",Latitude=" + Latitude);
			sb.append(",Longitude=" + Longitude);
			sb.append(",Elevation=" + Elevation);
			sb.append(",WeatherDate=" + String.valueOf(WeatherDate));
			sb.append(",Condition=" + Condition);
			sb.append(",Temperature=" + Temperature);
			sb.append(",Pressure=" + Pressure);
			sb.append(",Humidity=" + Humidity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ForecastOutStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ForecastRowStruct implements
			routines.system.IPersistableRow<ForecastRowStruct> {
		final static byte[] commonByteArrayLock_WEATHER_WeatherForecast = new byte[0];
		static byte[] commonByteArray_WEATHER_WeatherForecast = new byte[0];

		public java.util.Date WeatherDate;

		public java.util.Date getWeatherDate() {
			return this.WeatherDate;
		}

		public String WeatherTime;

		public String getWeatherTime() {
			return this.WeatherTime;
		}

		public String Condition;

		public String getCondition() {
			return this.Condition;
		}

		public String Temperature;

		public String getTemperature() {
			return this.Temperature;
		}

		public String Pressure;

		public String getPressure() {
			return this.Pressure;
		}

		public String Humidity;

		public String getHumidity() {
			return this.Humidity;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WEATHER_WeatherForecast.length) {
					if (length < 1024
							&& commonByteArray_WEATHER_WeatherForecast.length == 0) {
						commonByteArray_WEATHER_WeatherForecast = new byte[1024];
					} else {
						commonByteArray_WEATHER_WeatherForecast = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WEATHER_WeatherForecast, 0,
						length);
				strReturn = new String(commonByteArray_WEATHER_WeatherForecast,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WEATHER_WeatherForecast) {

				try {

					int length = 0;

					this.WeatherDate = readDate(dis);

					this.WeatherTime = readString(dis);

					this.Condition = readString(dis);

					this.Temperature = readString(dis);

					this.Pressure = readString(dis);

					this.Humidity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.WeatherDate, dos);

				// String

				writeString(this.WeatherTime, dos);

				// String

				writeString(this.Condition, dos);

				// String

				writeString(this.Temperature, dos);

				// String

				writeString(this.Pressure, dos);

				// String

				writeString(this.Humidity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("WeatherDate=" + String.valueOf(WeatherDate));
			sb.append(",WeatherTime=" + WeatherTime);
			sb.append(",Condition=" + Condition);
			sb.append(",Temperature=" + Temperature);
			sb.append(",Pressure=" + Pressure);
			sb.append(",Humidity=" + Humidity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ForecastRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ForecastResStruct implements
			routines.system.IPersistableRow<ForecastResStruct> {
		final static byte[] commonByteArrayLock_WEATHER_WeatherForecast = new byte[0];
		static byte[] commonByteArray_WEATHER_WeatherForecast = new byte[0];

		public String string;

		public String getString() {
			return this.string;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WEATHER_WeatherForecast.length) {
					if (length < 1024
							&& commonByteArray_WEATHER_WeatherForecast.length == 0) {
						commonByteArray_WEATHER_WeatherForecast = new byte[1024];
					} else {
						commonByteArray_WEATHER_WeatherForecast = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WEATHER_WeatherForecast, 0,
						length);
				strReturn = new String(commonByteArray_WEATHER_WeatherForecast,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WEATHER_WeatherForecast) {

				try {

					int length = 0;

					this.string = readString(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.statusCode = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.string, dos);

				// Document

				dos.writeObject(this.body);

				// Integer

				writeInteger(this.statusCode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("string=" + string);
			sb.append(",body=" + String.valueOf(body));
			sb.append(",statusCode=" + String.valueOf(statusCode));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ForecastResStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class LookupRowStruct implements
			routines.system.IPersistableRow<LookupRowStruct> {
		final static byte[] commonByteArrayLock_WEATHER_WeatherForecast = new byte[0];
		static byte[] commonByteArray_WEATHER_WeatherForecast = new byte[0];

		public java.util.Date ForecastDate;

		public java.util.Date getForecastDate() {
			return this.ForecastDate;
		}

		public Integer StationID;

		public Integer getStationID() {
			return this.StationID;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String IATACode;

		public String getIATACode() {
			return this.IATACode;
		}

		public String Latitude;

		public String getLatitude() {
			return this.Latitude;
		}

		public String Longitude;

		public String getLongitude() {
			return this.Longitude;
		}

		public String Elevation;

		public String getElevation() {
			return this.Elevation;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_WEATHER_WeatherForecast.length) {
					if (length < 1024
							&& commonByteArray_WEATHER_WeatherForecast.length == 0) {
						commonByteArray_WEATHER_WeatherForecast = new byte[1024];
					} else {
						commonByteArray_WEATHER_WeatherForecast = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_WEATHER_WeatherForecast, 0,
						length);
				strReturn = new String(commonByteArray_WEATHER_WeatherForecast,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WEATHER_WeatherForecast) {

				try {

					int length = 0;

					this.ForecastDate = readDate(dis);

					this.StationID = readInteger(dis);

					this.City = readString(dis);

					this.Country = readString(dis);

					this.IATACode = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Elevation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.ForecastDate, dos);

				// Integer

				writeInteger(this.StationID, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.IATACode, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Elevation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ForecastDate=" + String.valueOf(ForecastDate));
			sb.append(",StationID=" + String.valueOf(StationID));
			sb.append(",City=" + City);
			sb.append(",Country=" + Country);
			sb.append(",IATACode=" + IATACode);
			sb.append(",Latitude=" + Latitude);
			sb.append(",Longitude=" + Longitude);
			sb.append(",Elevation=" + Elevation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LookupRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RandomRowStruct implements
			routines.system.IPersistableRow<RandomRowStruct> {
		final static byte[] commonByteArrayLock_WEATHER_WeatherForecast = new byte[0];
		static byte[] commonByteArray_WEATHER_WeatherForecast = new byte[0];

		public java.util.Date ForecastDate;

		public java.util.Date getForecastDate() {
			return this.ForecastDate;
		}

		public Integer StationID;

		public Integer getStationID() {
			return this.StationID;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WEATHER_WeatherForecast) {

				try {

					int length = 0;

					this.ForecastDate = readDate(dis);

					this.StationID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.ForecastDate, dos);

				// Integer

				writeInteger(this.StationID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ForecastDate=" + String.valueOf(ForecastDate));
			sb.append(",StationID=" + String.valueOf(StationID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RandomRowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tRowGenerator_1Struct implements
			routines.system.IPersistableRow<after_tRowGenerator_1Struct> {
		final static byte[] commonByteArrayLock_WEATHER_WeatherForecast = new byte[0];
		static byte[] commonByteArray_WEATHER_WeatherForecast = new byte[0];

		public java.util.Date ForecastDate;

		public java.util.Date getForecastDate() {
			return this.ForecastDate;
		}

		public Integer StationID;

		public Integer getStationID() {
			return this.StationID;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WEATHER_WeatherForecast) {

				try {

					int length = 0;

					this.ForecastDate = readDate(dis);

					this.StationID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.ForecastDate, dos);

				// Integer

				writeInteger(this.StationID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ForecastDate=" + String.valueOf(ForecastDate));
			sb.append(",StationID=" + String.valueOf(StationID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tRowGenerator_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputXML_1Process(globalMap);

				RandomRowStruct RandomRow = new RandomRowStruct();
				LookupRowStruct LookupRow = new LookupRowStruct();
				ForecastResStruct ForecastRes = new ForecastResStruct();
				ForecastRowStruct ForecastRow = new ForecastRowStruct();
				ForecastOutStruct ForecastOut = new ForecastOutStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.dataloc + "/" + "forecasts.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("IATACode");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Latitude");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Longitude");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Elevation");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("WeatherDate");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Condition");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Temperature");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Pressure");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Humidity");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ForecastOutStruct ForecastOut_tmp = new ForecastOutStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
							String jsonPath) {
						if (jsonPathString2compiledJsonPath
								.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath
									.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath,
									compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<StationStruct> tHash_Lookup_Station = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<StationStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<StationStruct>) globalMap
						.get("tHash_Lookup_Station"));

				StationStruct StationHashKey = new StationStruct();
				StationStruct StationDefault = new StationStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LookupRowStruct LookupRow_tmp = new LookupRowStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = context.samplesize;

				class tRowGenerator_1Randomizer {
					public java.util.Date getRandomForecastDate() {

						return TalendDate.getRandomDate("2015-01-01",
								"2016-06-30");

					}

					public Integer getRandomStationID() {

						return Numeric.random(1, 10);

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					RandomRow.ForecastDate = randtRowGenerator_1
							.getRandomForecastDate();
					RandomRow.StationID = randtRowGenerator_1
							.getRandomStationID();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */

					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "Station"
					// /////////////////////////////////////////////

					boolean forceLoopStation = false;

					StationStruct StationObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						StationHashKey.StationID = RandomRow.StationID;

						StationHashKey.hashCodeDirty = true;

						tHash_Lookup_Station.lookup(StationHashKey);

					} // G_TM_M_020

					if (tHash_Lookup_Station != null
							&& tHash_Lookup_Station.getCount(StationHashKey) > 1) { // G
																					// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Station' and it contains more one result from keys :  Station.StationID = '"
						// + StationHashKey.StationID + "'");
					} // G 071

					StationStruct Station = null;

					StationStruct fromLookup_Station = null;
					Station = StationDefault;

					if (tHash_Lookup_Station != null
							&& tHash_Lookup_Station.hasNext()) { // G 099

						fromLookup_Station = tHash_Lookup_Station.next();

					} // G 099

					if (fromLookup_Station != null) {
						Station = fromLookup_Station;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						LookupRow = null;

						// # Output table : 'LookupRow'
						LookupRow_tmp.ForecastDate = RandomRow.ForecastDate;
						LookupRow_tmp.StationID = RandomRow.StationID;
						LookupRow_tmp.City = Station.City;
						LookupRow_tmp.Country = Station.Country;
						LookupRow_tmp.IATACode = Station.IATACode;
						LookupRow_tmp.Latitude = Station.Latitude;
						LookupRow_tmp.Longitude = Station.Longitude;
						LookupRow_tmp.Elevation = Station.Elevation;
						LookupRow = LookupRow_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "LookupRow"
					if (LookupRow != null) {

						/**
						 * [tRESTClient_1 main ] start
						 */

						currentComponent = "tRESTClient_1";

						ForecastRes = null;

						try {
							// request body
							org.dom4j.Document requestDoc_tRESTClient_1 = null;
							String requestString_tRESTClient_1 = null;

							Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1
									: requestString_tRESTClient_1;

							// expected response body
							Object responseDoc_tRESTClient_1 = null;

							Class<?> responseClass_tRESTClient_1 = String.class;

							// create web client instance
							org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

							boolean inOSGi = false;
							try {
								inOSGi = (null != factoryBean_tRESTClient_1
										.getBus()
										.getExtension(
												Class.forName("org.osgi.framework.BundleContext")));
							} catch (ClassNotFoundException e_tRESTClient_1) {
								; // ignore
							}

							final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

							String url = "http://api.worldweatheronline.com";
							// {baseUri}tRESTClient
							factoryBean_tRESTClient_1
									.setServiceName(new javax.xml.namespace.QName(
											url, "tRESTClient"));
							factoryBean_tRESTClient_1.setAddress(url);

							factoryBean_tRESTClient_1
									.setFeatures(features_tRESTClient_1);

							java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
							providers_tRESTClient_1
									.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
										// workaround for
										// https://jira.talendforge.org/browse/TESB-7276
										public org.dom4j.Document readFrom(
												Class<org.dom4j.Document> cls,
												java.lang.reflect.Type type,
												java.lang.annotation.Annotation[] anns,
												javax.ws.rs.core.MediaType mt,
												javax.ws.rs.core.MultivaluedMap<String, String> headers,
												java.io.InputStream is)
												throws IOException,
												javax.ws.rs.WebApplicationException {
											String contentLength = headers
													.getFirst("Content-Length");
											if (!org.apache.cxf.common.util.StringUtils
													.isEmpty(contentLength)
													&& Integer
															.valueOf(contentLength) <= 0) {
												try {
													return org.dom4j.DocumentHelper
															.parseText("<root/>");
												} catch (org.dom4j.DocumentException e_tRESTClient_1) {
													e_tRESTClient_1
															.printStackTrace();
												}
												return null;
											}
											return super.readFrom(cls, type,
													anns, mt, headers, is);
										}
									});
							org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
							jsonProvider_tRESTClient_1
									.setIgnoreNamespaces(true);
							jsonProvider_tRESTClient_1
									.setAttributesToElements(true);

							jsonProvider_tRESTClient_1
									.setSupportUnwrapped(true);
							jsonProvider_tRESTClient_1.setWrapperName("root");

							jsonProvider_tRESTClient_1
									.setDropRootElement(false);
							providers_tRESTClient_1
									.add(jsonProvider_tRESTClient_1);
							factoryBean_tRESTClient_1
									.setProviders(providers_tRESTClient_1);
							factoryBean_tRESTClient_1
									.setTransportId("http://cxf.apache.org/transports/http");

							boolean use_auth_tRESTClient_1 = false;
							if (use_auth_tRESTClient_1
									&& "SAML".equals("BASIC")) {
								if (!inOSGi) {
									throw new IllegalArgumentException(
											"SAML based security scenarios are not supported in Studio (standalone)");
								}
								// set SAML Token authentication

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

								org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
										.createSTSClient(
												factoryBean_tRESTClient_1
														.getBus(), "username",
												decryptedPassword_tRESTClient_1);

								org.talend.esb.security.saml.SAMLRESTUtils
										.configureClient(
												factoryBean_tRESTClient_1,
												stsClient);
							}

							org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
									.createWebClient();

							// set request path
							webClient_tRESTClient_1
									.path("/premium/v1/past-weather.ashx");

							// set connection properties
							org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
									.getConfig(webClient_tRESTClient_1);
							org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
									.getHttpConduit();

							if (use_auth_tRESTClient_1
									&& "BASIC".equals("BASIC")) {
								// set BASIC auth

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_1
										.setAuthorizationType("Basic");
								authPolicy_tRESTClient_1
										.setUserName("username");
								authPolicy_tRESTClient_1
										.setPassword(decryptedPassword_tRESTClient_1);
								conduit_tRESTClient_1
										.setAuthorization(authPolicy_tRESTClient_1);
							} else if (use_auth_tRESTClient_1
									&& "HTTP Digest".equals("BASIC")) {
								// set Digest auth

								final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
										.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

								org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
								authPolicy_tRESTClient_1
										.setAuthorizationType("Digest");
								authPolicy_tRESTClient_1
										.setUserName("username");
								authPolicy_tRESTClient_1
										.setPassword(decryptedPassword_tRESTClient_1);
								conduit_tRESTClient_1
										.setAuthorization(authPolicy_tRESTClient_1);
							}

							if (!inOSGi) {
								conduit_tRESTClient_1.getClient()
										.setReceiveTimeout((long) (60 * 1000L));
								conduit_tRESTClient_1.getClient()
										.setConnectionTimeout(
												(long) (30 * 1000L));
								boolean use_proxy_tRESTClient_1 = false;
								if (use_proxy_tRESTClient_1) {

									final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil
											.decryptPassword("f4f7aba1746784ea");

									conduit_tRESTClient_1.getClient()
											.setProxyServer("61.163.92.4");
									conduit_tRESTClient_1.getClient()
											.setProxyServerPort(
													Integer.valueOf(8080));
									conduit_tRESTClient_1
											.getProxyAuthorization()
											.setUserName("");
									conduit_tRESTClient_1
											.getProxyAuthorization()
											.setPassword(
													decryptedPassword_tRESTClient_1);
								}
							}

							// set Accept-Type
							webClient_tRESTClient_1.accept("application/json");

							// set optional query and header properties if any

							webClient_tRESTClient_1.header("Accept",
									"application/json");

							if (use_auth_tRESTClient_1
									&& "OAUTH2_BEARER".equals("BASIC")) {
								// set oAuth2 bearer token
								webClient_tRESTClient_1.header("Authorization",
										"Bearer " + "");
							}

							// if FORM request then capture query parameters
							// into Form, otherwise set them as queries

							webClient_tRESTClient_1.query("key",
									"a792dd1862bb451c840183532161607");

							webClient_tRESTClient_1.query("q", LookupRow.City
									+ "," + LookupRow.Country);

							webClient_tRESTClient_1.query("date", TalendDate
									.formatDate("yyyy-MM-dd",
											LookupRow.ForecastDate));

							webClient_tRESTClient_1.query("format", "json");

							webClient_tRESTClient_1.query("tp", "24");

							try {
								// start send request

								responseDoc_tRESTClient_1 = webClient_tRESTClient_1
										.get(responseClass_tRESTClient_1);

								int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1
										.getResponse().getStatus();
								if (webClientResponseStatus_tRESTClient_1 >= 300) {
									throw new javax.ws.rs.WebApplicationException(
											webClient_tRESTClient_1
													.getResponse());
								}

								if (ForecastRes == null) {
									ForecastRes = new ForecastResStruct();
								}

								ForecastRes.statusCode = webClientResponseStatus_tRESTClient_1;
								if (responseDoc_tRESTClient_1 != null) {
									if (responseClass_tRESTClient_1 == String.class) {
										ForecastRes.string = (String) responseDoc_tRESTClient_1;
									} else {
										routines.system.Document responseTalendDoc_tRESTClient_1 = null;
										if (null != responseDoc_tRESTClient_1) {
											responseTalendDoc_tRESTClient_1 = new routines.system.Document();
											responseTalendDoc_tRESTClient_1
													.setDocument((org.dom4j.Document) responseDoc_tRESTClient_1);
										}
										ForecastRes.body = responseTalendDoc_tRESTClient_1;
									}
								}

								globalMap.put("tRESTClient_1_HEADERS",
										webClient_tRESTClient_1.getResponse()
												.getHeaders());

							} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {

								throw ex_tRESTClient_1;

							}

						} catch (Exception e_tRESTClient_1) {

							throw new TalendException(e_tRESTClient_1,
									currentComponent, globalMap);

						}

						tos_count_tRESTClient_1++;

						/**
						 * [tRESTClient_1 main ] stop
						 */
						// Start of branch "ForecastRes"
						if (ForecastRes != null) {

							/**
							 * [tExtractJSONFields_1 main ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							if (ForecastRes.string != null) {// C_01
								jsonStr_tExtractJSONFields_1 = ForecastRes.string
										.toString();

								ForecastRow = null;

								String loopPath_tExtractJSONFields_1 = "$.data.weather[*]";
								java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

								boolean isStructError_tExtractJSONFields_1 = true;
								try {
									com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
											.parse(jsonStr_tExtractJSONFields_1);
									com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
									Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1
											.read(compiledLoopPath_tExtractJSONFields_1,
													net.minidev.json.JSONObject.class);
									if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
										resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
									} else {
										resultset_tExtractJSONFields_1
												.add(result_tExtractJSONFields_1);
									}

									isStructError_tExtractJSONFields_1 = false;
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									System.err.println(ex_tExtractJSONFields_1
											.getMessage());
								}

								String jsonPath_tExtractJSONFields_1 = null;
								com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

								Object value_tExtractJSONFields_1 = null;

								for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
										|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
												.size()); i_tExtractJSONFields_1++) {
									if (!isStructError_tExtractJSONFields_1) {
										Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
												.get(i_tExtractJSONFields_1);
										ForecastRow = null;
										ForecastRow = new ForecastRowStruct();
										nb_line_tExtractJSONFields_1++;
										try {
											jsonPath_tExtractJSONFields_1 = "date";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												if (value_tExtractJSONFields_1 != null
														&& !value_tExtractJSONFields_1
																.toString()
																.isEmpty()) {
													ForecastRow.WeatherDate = ParserUtils
															.parseTo_Date(
																	value_tExtractJSONFields_1
																			.toString(),
																	"yyyy-MM-dd");
												} else {
													ForecastRow.WeatherDate =

													null

													;
												}
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												ForecastRow.WeatherDate =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "hourly[0].time";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												ForecastRow.WeatherTime = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												ForecastRow.WeatherTime =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "hourly[0].weatherDesc[0].value";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												ForecastRow.Condition = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												ForecastRow.Condition =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "hourly[0].tempC";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												ForecastRow.Temperature = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												ForecastRow.Temperature =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "hourly[0].pressure";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												ForecastRow.Pressure = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												ForecastRow.Pressure =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "hourly[0].humidity";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												ForecastRow.Humidity = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												ForecastRow.Humidity =

												null

												;
											}
										} catch (java.lang.Exception ex_tExtractJSONFields_1) {
											System.err
													.println(ex_tExtractJSONFields_1
															.getMessage());
											ForecastRow = null;
										}

									}

									isStructError_tExtractJSONFields_1 = false;

									// }

									tos_count_tExtractJSONFields_1++;

									/**
									 * [tExtractJSONFields_1 main ] stop
									 */
									// Start of branch "ForecastRow"
									if (ForecastRow != null) {

										/**
										 * [tMap_2 main ] start
										 */

										currentComponent = "tMap_2";

										boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_2 = false;
										boolean mainRowRejected_tMap_2 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
											// ###############################
											// # Output tables

											ForecastOut = null;

											// # Output table : 'ForecastOut'
											ForecastOut_tmp.IATACode = LookupRow.IATACode;
											ForecastOut_tmp.Latitude = LookupRow.Latitude;
											ForecastOut_tmp.Longitude = LookupRow.Longitude;
											ForecastOut_tmp.Elevation = LookupRow.Elevation;
											ForecastOut_tmp.WeatherDate = ForecastRow.WeatherDate;
											ForecastOut_tmp.Condition = ForecastRow.Condition;
											ForecastOut_tmp.Temperature = ForecastRow.Temperature;
											ForecastOut_tmp.Pressure = ForecastRow.Pressure;
											ForecastOut_tmp.Humidity = ForecastRow.Humidity;
											ForecastOut = ForecastOut_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_2 = false;

										tos_count_tMap_2++;

										/**
										 * [tMap_2 main ] stop
										 */
										// Start of branch "ForecastOut"
										if (ForecastOut != null) {

											/**
											 * [tFileOutputDelimited_1 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_1";

											StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
											if (ForecastOut.IATACode != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.IATACode);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.Latitude != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.Latitude);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.Longitude != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.Longitude);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.Elevation != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.Elevation);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.WeatherDate != null) {
												sb_tFileOutputDelimited_1
														.append(FormatterUtils
																.format_Date(
																		ForecastOut.WeatherDate,
																		"yyyy-MM-dd'T'HH:mm:ss'Z'"));
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.Condition != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.Condition);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.Temperature != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.Temperature);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.Pressure != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.Pressure);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (ForecastOut.Humidity != null) {
												sb_tFileOutputDelimited_1
														.append(ForecastOut.Humidity);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

											nb_line_tFileOutputDelimited_1++;
											resourceMap
													.put("nb_line_tFileOutputDelimited_1",
															nb_line_tFileOutputDelimited_1);

											outtFileOutputDelimited_1
													.write(sb_tFileOutputDelimited_1
															.toString());

											tos_count_tFileOutputDelimited_1++;

											/**
											 * [tFileOutputDelimited_1 main ]
											 * stop
											 */

										} // End of branch "ForecastOut"

									} // End of branch "ForecastRow"

									// end for
								}

							} // C_01

						} // End of branch "ForecastRes"

					} // End of branch "LookupRow"

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE",
						nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_Station != null) {
					tHash_Lookup_Station.endGet();
				}
				globalMap.remove("tHash_Lookup_Station");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE",
						nb_line_tExtractJSONFields_1);

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_Station");

			try {

				/**
				 * [tRowGenerator_1 finally ] start
				 */

				currentComponent = "tRowGenerator_1";

				/**
				 * [tRowGenerator_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class StationStruct implements
			routines.system.IPersistableComparableLookupRow<StationStruct> {
		final static byte[] commonByteArrayLock_WEATHER_WeatherForecast = new byte[0];
		static byte[] commonByteArray_WEATHER_WeatherForecast = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer StationID;

		public Integer getStationID() {
			return this.StationID;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String IATACode;

		public String getIATACode() {
			return this.IATACode;
		}

		public String Latitude;

		public String getLatitude() {
			return this.Latitude;
		}

		public String Longitude;

		public String getLongitude() {
			return this.Longitude;
		}

		public String Elevation;

		public String getElevation() {
			return this.Elevation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.StationID == null) ? 0 : this.StationID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final StationStruct other = (StationStruct) obj;

			if (this.StationID == null) {
				if (other.StationID != null)
					return false;

			} else if (!this.StationID.equals(other.StationID))

				return false;

			return true;
		}

		public void copyDataTo(StationStruct other) {

			other.StationID = this.StationID;
			other.City = this.City;
			other.Country = this.Country;
			other.IATACode = this.IATACode;
			other.Latitude = this.Latitude;
			other.Longitude = this.Longitude;
			other.Elevation = this.Elevation;

		}

		public void copyKeysDataTo(StationStruct other) {

			other.StationID = this.StationID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_WEATHER_WeatherForecast) {

				try {

					int length = 0;

					this.StationID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.StationID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.City = readString(dis, ois);

				this.Country = readString(dis, ois);

				this.IATACode = readString(dis, ois);

				this.Latitude = readString(dis, ois);

				this.Longitude = readString(dis, ois);

				this.Elevation = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.City, dos, oos);

				writeString(this.Country, dos, oos);

				writeString(this.IATACode, dos, oos);

				writeString(this.Latitude, dos, oos);

				writeString(this.Longitude, dos, oos);

				writeString(this.Elevation, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StationID=" + String.valueOf(StationID));
			sb.append(",City=" + City);
			sb.append(",Country=" + Country);
			sb.append(",IATACode=" + IATACode);
			sb.append(",Latitude=" + Latitude);
			sb.append(",Longitude=" + Longitude);
			sb.append(",Elevation=" + Elevation);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(StationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.StationID, other.StationID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				StationStruct Station = new StationStruct();

				/**
				 * [tAdvancedHash_Station begin ] start
				 */

				ok_Hash.put("tAdvancedHash_Station", false);
				start_Hash.put("tAdvancedHash_Station",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_Station";

				int tos_count_tAdvancedHash_Station = 0;

				// connection name:Station
				// source node:tFileInputXML_1 - inputs:(after_tRowGenerator_1)
				// outputs:(Station,Station) | target node:tAdvancedHash_Station
				// - inputs:(Station) outputs:()
				// linked node: tMap_1 - inputs:(RandomRow,Station)
				// outputs:(LookupRow)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Station = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<StationStruct> tHash_Lookup_Station = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<StationStruct> getLookup(matchingModeEnum_Station);

				globalMap.put("tHash_Lookup_Station", tHash_Lookup_Station);

				/**
				 * [tAdvancedHash_Station begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = context.dataloc + "/" + "stations.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_1)),
								"ISO-8859-15");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("/WeatherStations/StationDetails"));
					x_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

					// init all mapping xpaths
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;
						Station = null;
						Station = null;
						boolean whetherReject_tFileInputXML_1 = false;
						Station = new StationStruct();
						try {
							org.dom4j.XPath xTmp0_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("StationID",
													"/WeatherStations/StationDetails"));
							xTmp0_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj0_tFileInputXML_1 = xTmp0_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								Station.StationID = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)
									|| xml_api_tFileInputXML_1
											.isMissing(node_tFileInputXML_1)) {
								Station.StationID = null;
							} else {
								Station.StationID = ParserUtils
										.parseTo_Integer(str_tFileInputXML_1);
							}
							org.dom4j.XPath xTmp1_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("City",
													"/WeatherStations/StationDetails"));
							xTmp1_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj1_tFileInputXML_1 = xTmp1_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj1_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_1 instanceof String
									|| obj1_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj1_tFileInputXML_1);
							} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								Station.City = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								Station.City = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								Station.City = null;
							} else {
								Station.City = str_tFileInputXML_1;
							}
							org.dom4j.XPath xTmp2_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("Country",
													"/WeatherStations/StationDetails"));
							xTmp2_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj2_tFileInputXML_1 = xTmp2_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj2_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj2_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj2_tFileInputXML_1 instanceof String
									|| obj2_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj2_tFileInputXML_1);
							} else if (obj2_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj2_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								Station.Country = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								Station.Country = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								Station.Country = null;
							} else {
								Station.Country = str_tFileInputXML_1;
							}
							org.dom4j.XPath xTmp3_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("IATACode",
													"/WeatherStations/StationDetails"));
							xTmp3_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj3_tFileInputXML_1 = xTmp3_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj3_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj3_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj3_tFileInputXML_1 instanceof String
									|| obj3_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj3_tFileInputXML_1);
							} else if (obj3_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj3_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								Station.IATACode = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								Station.IATACode = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								Station.IATACode = null;
							} else {
								Station.IATACode = str_tFileInputXML_1;
							}
							org.dom4j.XPath xTmp4_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("Latitude",
													"/WeatherStations/StationDetails"));
							xTmp4_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj4_tFileInputXML_1 = xTmp4_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj4_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj4_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj4_tFileInputXML_1 instanceof String
									|| obj4_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj4_tFileInputXML_1);
							} else if (obj4_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj4_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								Station.Latitude = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								Station.Latitude = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								Station.Latitude = null;
							} else {
								Station.Latitude = str_tFileInputXML_1;
							}
							org.dom4j.XPath xTmp5_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("Longitude",
													"/WeatherStations/StationDetails"));
							xTmp5_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj5_tFileInputXML_1 = xTmp5_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj5_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj5_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj5_tFileInputXML_1 instanceof String
									|| obj5_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj5_tFileInputXML_1);
							} else if (obj5_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj5_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								Station.Longitude = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								Station.Longitude = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								Station.Longitude = null;
							} else {
								Station.Longitude = str_tFileInputXML_1;
							}
							org.dom4j.XPath xTmp6_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("Elevation",
													"/WeatherStations/StationDetails"));
							xTmp6_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj6_tFileInputXML_1 = xTmp6_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj6_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj6_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj6_tFileInputXML_1 instanceof String
									|| obj6_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj6_tFileInputXML_1);
							} else if (obj6_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj6_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								Station.Elevation = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								Station.Elevation = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								Station.Elevation = null;
							} else {
								Station.Elevation = str_tFileInputXML_1;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							Station = null;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */

						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */
						// Start of branch "Station"
						if (Station != null) {

							/**
							 * [tAdvancedHash_Station main ] start
							 */

							currentComponent = "tAdvancedHash_Station";

							StationStruct Station_HashRow = new StationStruct();

							Station_HashRow.StationID = Station.StationID;

							Station_HashRow.City = Station.City;

							Station_HashRow.Country = Station.Country;

							Station_HashRow.IATACode = Station.IATACode;

							Station_HashRow.Latitude = Station.Latitude;

							Station_HashRow.Longitude = Station.Longitude;

							Station_HashRow.Elevation = Station.Elevation;

							tHash_Lookup_Station.put(Station_HashRow);

							tos_count_tAdvancedHash_Station++;

							/**
							 * [tAdvancedHash_Station main ] stop
							 */

						} // End of branch "Station"

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_Station end ] start
				 */

				currentComponent = "tAdvancedHash_Station";

				tHash_Lookup_Station.endPut();

				ok_Hash.put("tAdvancedHash_Station", true);
				end_Hash.put("tAdvancedHash_Station",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_Station end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_1 finally ] start
				 */

				currentComponent = "tFileInputXML_1";

				/**
				 * [tFileInputXML_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_Station finally ] start
				 */

				currentComponent = "tAdvancedHash_Station";

				/**
				 * [tAdvancedHash_Station finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final WeatherForecast WeatherForecastClass = new WeatherForecast();

		int exitCode = WeatherForecastClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = WeatherForecast.class
					.getClassLoader().getResourceAsStream(
							"weather/weatherforecast_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.dataloc = (String) context.getProperty("dataloc");
			try {
				context.samplesize = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("samplesize"));
			} catch (NumberFormatException e) {
				context.samplesize = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("dataloc")) {
				context.dataloc = (String) parentContextMap.get("dataloc");
			}
			if (parentContextMap.containsKey("samplesize")) {
				context.samplesize = (Integer) parentContextMap
						.get("samplesize");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRowGenerator_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRowGenerator_1) {
			globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

			e_tRowGenerator_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : WeatherForecast");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 120808 characters generated by Talend Open Studio for Big Data on the July
 * 17, 2016 7:46:50 PM AEST
 ************************************************************************************************/
